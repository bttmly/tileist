// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$.fn.tileist = function(options) {
  var TwoDimensionalArray, cell, column, defaults, distanceOf, grid, gridSize, settings,
    _this = this;
  defaults = {
    layout: "triangle",
    width: 40,
    height: 80,
    color: blue
  };
  settings = $.extend({}, defaults, options);
  gridSize = {
    x: (function() {
      return Math.ceil(_this.width() / settings.width);
    })(),
    y: (function() {
      return Math.ceil(_this.height() / settings.height);
    })()
  };
  cell = {
    rectangle: "<div class='tileist-cell tileist-cell-rectangle'></div>",
    triangle: "<div class='tileist-cell tileist-celltriangle'><div></div><div></div></div>",
    hexagon: "<div class='tileist-cell tileist-cell-hexagon'></div>"
  };
  TwoDimensionalArray = (function(_super) {
    __extends(TwoDimensionalArray, _super);

    function TwoDimensionalArray(xSize, ySize, fill) {
      var x, y, _i, _j;
      if (fill == null) {
        fill = "";
      }
      for (x = _i = 0; 0 <= xSize ? _i < xSize : _i > xSize; x = 0 <= xSize ? ++_i : --_i) {
        this.push([]);
        for (y = _j = 0; 0 <= ySize ? _j < ySize : _j > ySize; y = 0 <= ySize ? ++_j : --_j) {
          this[x].push(fill);
        }
      }
    }

    return TwoDimensionalArray;

  })(Array);
  distanceOf = function(origin, location) {
    var square;
    square = function(num) {
      return num * num;
    };
    return Math.sqrt(square(origin[0] - location[0]) + square(origin[1] - location[1]));
  };
  grid = new TwoDimensionalArray(gridSize.x, gridSize.y(cell[settings.layout]));
  return this.append = ((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = grid.length; _i < _len; _i++) {
      column = grid[_i];
      _results.push("<div class='tileist-row'>" + (column.join("\n")) + "</div>");
    }
    return _results;
  })()).join("\n");
};
